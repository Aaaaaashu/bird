{"version":3,"sources":["component/qrcode/index.js","page/encrypt/index.js","page/decrypt/index.js","page/key/index.js","component/tab/index.js","component/header/index.js","App.js","serviceWorker.js","index.js","utils/crypto.js"],"names":["QRCode","this","props","value","size","className","Component","Encrypt","state","message","pubKey","encryptedMessage","isFlipped","isQrCode","encryptMessage","a","async","cogoToast","warn","crypto","setState","error","handleShare","TextField","label","multiline","rows","variant","fullWidth","margin","onChange","e","target","required","Button","onClick","renderEncryptedMessage","Grid","container","spacing","item","xs","text","onCopy","success","Decrypt","decrypttMessage","sessionPrivKey","sessionStorage","getItem","Card","CardContent","Typography","component","Key","generateKey","sessionPubKey","privKey","setItem","Tab","index","console","log","src","alt","Header","App","window","imToken","callPromisifyAPI","navigatorColor","catch","err","renderPage","page","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","encrypt","plaintext","eccrypto","Buffer","from","encrypted","JSON","stringify","toString","decrypt","ciphertext","oriBuffer","parse","ciphertextBuffer","Object","keys","forEach","data","decrypted","generateKeys","randomBytes","getPublicCompressed"],"mappings":"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","file":"static/js/main.04c022f7.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport QRCodeReact from 'qrcode.react'\nimport './index.css'\n\nexport default class QRCode extends Component {\n  render() {\n    const { value, size } = this.props\n    return (\n      <div className=\"qrcode-container\">\n        <QRCodeReact value={value} size={size || 160} />\n      </div>\n    )\n  }\n}","import React, { Component } from 'react'\nimport FlipCard from 'react-card-flip'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport cogoToast from 'cogo-toast'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Grid from '@material-ui/core/Grid';\nimport './index.css'\nimport QRCode from  '../../component/qrcode'\nimport * as crypto from '../../utils/crypto'\n\nexport default class Encrypt extends Component {\n  state = {\n    message: '',\n    pubKey: '',\n    encryptedMessage: '',\n    isFlipped: false,\n    isQrCode: false,\n  }\n\n  encryptMessage = async (message, pubKey) => {\n    if (!message) return cogoToast.warn('请输入信息')\n    if (!pubKey) return cogoToast.warn('请输入对方的 Bird ID')\n    try {\n      const encryptedMessage = await crypto.encrypt(message, pubKey)\n      this.setState({  encryptedMessage, isFlipped: true, isQrCode: true })\n    } catch(error) {\n      cogoToast.error(error.message)\n    }\n  }\n\n  renderEncryptedMessage(encryptedMessage, isQrCode) {\n    if (isQrCode) {\n      return <QRCode value={encryptedMessage} />\n    } else {\n      return <div className=\"encrypted-message\">{encryptedMessage}</div>\n    }\n  }\n\n  handleShare = () => {\n\n  }\n\n  render() {\n    const { message, pubKey, isFlipped, isQrCode, encryptedMessage } = this.state\n\n    return (\n      <FlipCard isFlipped={isFlipped}>\n        <div className=\"card-white\">\n          <TextField\n            label=\"Message\"\n            multiline\n            rows=\"4\"\n            variant=\"outlined\"\n            fullWidth={true}\n            margin=\"normal\"\n            onChange={e => this.setState({ message: e.target.value })}\n          />\n          <TextField \n            required \n            label=\"Bird ID\" \n            variant=\"outlined\"\n            fullWidth={true}\n            margin=\"normal\"\n            onChange={e => this.setState({ pubKey: e.target.value })}\n          />\n\n          <Button \n            variant=\"contained\" \n            fullWidth={true}\n            size=\"large\"\n            onClick={() => this.encryptMessage(message, pubKey)}\n          >\n            Encrypt\n          </Button>\n        </div>\n        <div className=\"card\">\n          <div className=\"card-header\">\n            <h2 className=\"card-title\">Encrypted Message</h2>\n            <p className=\"card-contennt\">Please send the encrypted message to your friend for decryption</p>\n          </div>\n          {this.renderEncryptedMessage(encryptedMessage, isQrCode)}\n          <Grid container spacing={1}> \n            <Grid item xs={6}>\n              <CopyToClipboard text={encryptedMessage}  onCopy={() => cogoToast.success('Copy sucess')}>\n                <Button variant=\"contained\" size=\"large\">Copy</Button>\n              </CopyToClipboard>\n            </Grid>\n            <Grid item xs={6}>\n              <Button variant=\"contained\" size=\"large\" onClick={this.handleShare}>Share</Button>\n            </Grid>\n          </Grid>\n    \n          <Button onClick={() => this.setState({ isFlipped: false })}>Back</Button>\n        </div>\n      </FlipCard>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport FlipCard from 'react-card-flip'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport cogoToast from 'cogo-toast'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport './index.css';\nimport * as crypto from '../../utils/crypto'\n\nexport default class Decrypt extends Component {\n  state = {\n    encryptedMessage: '',\n    message: '',\n    isFlipped: false,\n  }\n\n  decrypttMessage = async (encryptedMessage) => {\n    if (!encryptedMessage) cogoToast.warn('请输入加密信息')\n    try {\n      const sessionPrivKey = sessionStorage.getItem('privKey')\n      const message = await crypto.decrypt(encryptedMessage, sessionPrivKey)\n      this.setState({ message, isFlipped: true })\n    } catch (error) {\n      cogoToast.error(error.message)\n    }\n  }\n\n  render() {\n    const { isFlipped, message, encryptedMessage } = this.state\n\n    return (\n      <FlipCard isFlipped={isFlipped}>\n        <div className=\"card-white\">\n          <TextField\n            label=\"Message\"\n            multiline\n            rows=\"4\"\n            variant=\"outlined\"\n            fullWidth={true}\n            margin=\"normal\"\n            onChange={e => this.setState({ encryptedMessage: e.target.value })}\n          />\n          <Button \n            variant=\"contained\" \n            fullWidth={true}\n            size=\"large\"\n            onClick={() => this.decrypttMessage(encryptedMessage)}\n          >\n            Decrypt\n          </Button>\n        </div>\n        <div className=\"card\">\n          <div className=\"card-header\">\n            <h2 className=\"card-title\">Plaintext</h2>\n            <p className=\"card-contennt\"></p>\n          </div>\n          <Card className=\"message\">\n            <CardContent>\n              <Typography variant=\"h5\" component=\"h2\">\n                {message}\n              </Typography>\n            </CardContent>\n          </Card>\n          <CopyToClipboard text={encryptedMessage}  onCopy={() => cogoToast.success('Copy sucess')}>\n              <Button variant=\"contained\" size=\"large\">Copy</Button>\n          </CopyToClipboard>\n        </div>\n      </FlipCard>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport cogoToast from 'cogo-toast'\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid';\nimport './index.css'\nimport QRCode from '../../component/qrcode'\nimport * as crypto from '../../utils/crypto'\n\nexport default class Key extends Component {\n  state = {\n    pubKey: ''\n  }\n\n  componentDidMount() {\n    const { pubKey } = this.generateKey()\n    this.setState({ pubKey })\n  }\n\n  generateKey() {\n    const sessionPubKey = sessionStorage.getItem('pubKey')\n    const sessionPrivKey = sessionStorage.getItem('privKey')\n    if (!sessionPubKey || !sessionPrivKey) {\n      const { privKey, pubKey } = crypto.generateKeys()\n      sessionStorage.setItem('pubKey', pubKey)\n      sessionStorage.setItem('privKey', privKey)\n\n      return { pubKey }\n    } else {\n      return { pubKey: sessionPubKey }\n    }\n  }\n\n  handleShare = () => {\n\n  }\n\n  render() {\n    const { pubKey } = this.state\n    return (\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <h2 className=\"card-title\">Bird ID</h2>\n          <p className=\"card-content\">{pubKey}</p>\n        </div>\n        <QRCode value={pubKey} />\n        <Grid container spacing={1}> \n          <Grid item xs={6}>\n            <CopyToClipboard text={pubKey}  onCopy={() => cogoToast.success('Copy sucess')}>\n              <Button variant=\"contained\" size=\"large\">Copy</Button>\n            </CopyToClipboard>\n          </Grid>\n          <Grid item xs={6}>\n            <Button variant=\"contained\" size=\"large\" onClick={this.handleShare}>Share</Button>\n          </Grid>\n        </Grid>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport './index.css';\n\nexport default class Tab extends Component {\n  render() {\n    const { index, onChange } = this.props\n    console.log(index);\n    \n    return (\n      <div className=\"tab-container\">\n        <div className={`tab-item ${index === 1 ? 'active' : ''}`} onClick={() => onChange(1)}>\n          <img src=\"encrypt.png\" alt=\"encrypt\"/>\n          <span>Encrypt</span>\n        </div>\n        <div className={`tab-item ${index === 2 ? 'active' : ''}`} onClick={() => onChange(2)}>\n          <img src=\"decrypt.png\" alt=\"decrypt\"/>\n          <span>Decrypt</span>\n        </div>\n        <div className={`tab-item ${index === 3 ? 'active' : ''}`} onClick={() => onChange(3)}>\n          <img src=\"decrypt.png\" alt=\"key\"/>\n          <span>Key</span>\n        </div>\n      </div>\n    );\n  }\n}\n\n\n","import React, { Component } from 'react'\nimport './index.css'\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <div className=\"header\">\n        <h1 className=\"header-title\">Bird</h1>\n        <p className=\"header-desc\">Send a bird message</p>\n      </div>\n    );\n  }\n}\n\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport Encrypt from './page/encrypt'\nimport Decrypt from './page/decrypt'\nimport Key from './page/key'\nimport Tab from './component/tab'\nimport Header from './component/header'\n\nexport class App extends Component {\n\n  state = {\n    index: 1,\n  }\n\n  componentWillMount() {\n    if (window.imToken) {\n      window.imToken.callPromisifyAPI('navigator.configure', { navigatorColor: '#ffd439' }).catch(err => console.warn(err))\n    }\n  }\n\n  renderPage(index) {\n    if (index === 1) return <Encrypt />\n    if (index === 2) return <Decrypt />\n    if (index === 3) return <Key />\n    return null\n  }\n\n  render() {\n    const { index } = this.state\n    return (\n      <div className=\"App\">\n        <div className=\"App-container\">\n          <Header />\n          {this.renderPage(index)}\n          <Tab index={index} onChange={(page) => this.setState({ index: page })} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import crypto from 'crypto'\nimport eccrypto from 'eccrypto'\n\nexport async function encrypt(plaintext, pubKey) {\n  try {\n    const encrypted = await eccrypto.encrypt(Buffer.from(pubKey, 'hex'), Buffer.from(plaintext))\n    return Buffer.from(JSON.stringify(encrypted)).toString('base64')\n  } catch (error) {\n    console.warn(error.message)\n  }\n}\n\nexport async function decrypt(ciphertext, privKey) {\n  try {\n    const oriBuffer = JSON.parse(Buffer.from(ciphertext, 'base64'))\n    const ciphertextBuffer = {}\n    Object.keys(oriBuffer).forEach((item) => {\n      ciphertextBuffer[item] = Buffer.from(oriBuffer[item].data)\n    })\n\n    const decrypted = await eccrypto.decrypt(Buffer.from(privKey, 'hex'), ciphertextBuffer)\n    return decrypted.toString()\n  } catch (error) {\n    console.warn(error.message)\n  }\n}\n\nexport function generateKeys() {\n  const privKey = crypto.randomBytes(32)\n  const pubKey = eccrypto.getPublicCompressed(privKey)\n  return {\n    privKey: privKey.toString('hex'),\n    pubKey: pubKey.toString('hex'),\n  }\n}"],"sourceRoot":""}